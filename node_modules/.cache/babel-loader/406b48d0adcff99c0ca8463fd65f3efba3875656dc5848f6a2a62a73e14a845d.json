{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine.js';\nimport Config from './config.js';\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer.js';\nimport { execute, getElement, isElement } from './index.js';\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory';\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {},\n  // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n};\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n};\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n};\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super();\n    this._config = this._getConfig(config);\n  }\n\n  // Getters\n  static get Default() {\n    return Default;\n  }\n  static get DefaultType() {\n    return DefaultType;\n  }\n  static get NAME() {\n    return NAME;\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content).map(config => this._resolvePossibleFunction(config)).filter(Boolean);\n  }\n  hasContent() {\n    return this.getContent().length > 0;\n  }\n  changeContent(content) {\n    this._checkContent(content);\n    this._config.content = {\n      ...this._config.content,\n      ...content\n    };\n    return this;\n  }\n  toHtml() {\n    const templateWrapper = document.createElement('div');\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector);\n    }\n    const template = templateWrapper.children[0];\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass);\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '));\n    }\n    return template;\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config);\n    this._checkContent(config.content);\n  }\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({\n        selector,\n        entry: content\n      }, DefaultContentType);\n    }\n  }\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template);\n    if (!templateElement) {\n      return;\n    }\n    content = this._resolvePossibleFunction(content);\n    if (!content) {\n      templateElement.remove();\n      return;\n    }\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement);\n      return;\n    }\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content);\n      return;\n    }\n    templateElement.textContent = content;\n  }\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n  }\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this]);\n  }\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = '';\n      templateElement.append(element);\n      return;\n    }\n    templateElement.textContent = element.textContent;\n  }\n}\nexport default TemplateFactory;","map":{"version":3,"names":["SelectorEngine","Config","DefaultAllowlist","sanitizeHtml","execute","getElement","isElement","NAME","Default","allowList","content","extraClass","html","sanitize","sanitizeFn","template","DefaultType","DefaultContentType","entry","selector","TemplateFactory","constructor","config","_config","_getConfig","getContent","Object","values","map","_resolvePossibleFunction","filter","Boolean","hasContent","length","changeContent","_checkContent","toHtml","templateWrapper","document","createElement","innerHTML","_maybeSanitize","text","entries","_setContent","children","classList","add","split","_typeCheckConfig","arg","templateElement","findOne","remove","_putElementInTemplate","textContent","element","append"],"sources":["/Volumes/DatosINT/DEV/Git/PgMiaLucas/juanbproducciones/node_modules/bootstrap/js/src/util/template-factory.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer.js'\nimport { execute, getElement, isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory'\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {}, // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n}\n\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n}\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content)\n      .map(config => this._resolvePossibleFunction(config))\n      .filter(Boolean)\n  }\n\n  hasContent() {\n    return this.getContent().length > 0\n  }\n\n  changeContent(content) {\n    this._checkContent(content)\n    this._config.content = { ...this._config.content, ...content }\n    return this\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div')\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector)\n    }\n\n    const template = templateWrapper.children[0]\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '))\n    }\n\n    return template\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config)\n    this._checkContent(config.content)\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template)\n\n    if (!templateElement) {\n      return\n    }\n\n    content = this._resolvePossibleFunction(content)\n\n    if (!content) {\n      templateElement.remove()\n      return\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement)\n      return\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content)\n      return\n    }\n\n    templateElement.textContent = content\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this])\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = ''\n      templateElement.append(element)\n      return\n    }\n\n    templateElement.textContent = element.textContent\n  }\n}\n\nexport default TemplateFactory\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}